From 29e6e6b1c0a6925abc33510297f6f49470bcf016 Mon Sep 17 00:00:00 2001
From: Stefan Agner <stefan@agner.ch>
Date: Fri, 7 Jun 2024 15:50:34 +0200
Subject: [PATCH] [Python] Add TriggerResubscribeIfScheduled to
 SubscriptionTransaction (#33774)

Add TriggerResubscribeIfScheduled to SubscriptionTransaction. If the
ReadClient currently has a resubscription attempt scheduled, This
function allows to trigger that attempt immediately. This is useful
when the server side is up and communicating, and it's a good time to
try to resubscribe.
---
 src/controller/python/chip/clusters/Attribute.py  | 7 +++++++
 src/controller/python/chip/clusters/attribute.cpp | 6 ++++++
 2 files changed, 13 insertions(+)

diff --git a/src/controller/python/chip/clusters/Attribute.py b/src/controller/python/chip/clusters/Attribute.py
index 51389e19a1..838936e83b 100644
--- a/src/controller/python/chip/clusters/Attribute.py
+++ b/src/controller/python/chip/clusters/Attribute.py
@@ -478,6 +478,13 @@ class SubscriptionTransaction:
             lambda: handle.pychip_ReadClient_OverrideLivenessTimeout(self._readTransaction._pReadClient, timeoutMs)
         )
 
+    async def TriggerResubscribeIfScheduled(self, reason: str):
+        handle = chip.native.GetLibraryHandle()
+        await builtins.chipStack.CallAsync(
+            lambda: handle.pychip_ReadClient_TriggerResubscribeIfScheduled(
+                self._readTransaction._pReadClient, reason.encode("utf-8"))
+        )
+
     def GetReportingIntervalsSeconds(self) -> Tuple[int, int]:
         '''
         Retrieve the reporting intervals associated with an active subscription.
diff --git a/src/controller/python/chip/clusters/attribute.cpp b/src/controller/python/chip/clusters/attribute.cpp
index b73b4a49b4..7c5b2c906a 100644
--- a/src/controller/python/chip/clusters/attribute.cpp
+++ b/src/controller/python/chip/clusters/attribute.cpp
@@ -464,6 +464,12 @@ void pychip_ReadClient_OverrideLivenessTimeout(ReadClient * pReadClient, uint32_
     pReadClient->OverrideLivenessTimeout(System::Clock::Milliseconds32(livenessTimeoutMs));
 }
 
+void pychip_ReadClient_TriggerResubscribeIfScheduled(ReadClient * pReadClient, const char * reason)
+{
+    VerifyOrDie(pReadClient != nullptr);
+    pReadClient->TriggerResubscribeIfScheduled(reason);
+}
+
 PyChipError pychip_ReadClient_GetReportingIntervals(ReadClient * pReadClient, uint16_t * minIntervalSec, uint16_t * maxIntervalSec)
 {
     VerifyOrDie(pReadClient != nullptr);
-- 
2.45.2

